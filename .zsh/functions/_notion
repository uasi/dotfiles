#compdef notion

autoload -U is-at-least

_notion() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--verbose[Enables verbose diagnostics]' \
'-v[Prints the current version of Notion]' \
'--version[Prints the current version of Notion]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
":: :_notion_commands" \
"*::: :->Notion" \
&& ret=0
    case $state in
    (Notion)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:notion-command-$line[1]:"
        case $line[1] in
            (fetch)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
':tool[@version] -- Tools to fetch, like `node`, `yarn@latest` or `your-package@^14.4.3`.:_files' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
':tool[@version] -- Tools to install, like `node`, `yarn@latest` or `your-package@^14.4.3`.:_files' \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
':tool -- The tool to uninstall, e.g. `node`, `npm`, `yarn`, or <package>:_files' \
&& ret=0
;;
(pin)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
':tool[@version] -- Tools to pin, like `node@lts` or `yarn@^1.14`.:_files' \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" \
'-p[Display the current project'\''s Node version]' \
'--project[Display the current project'\''s Node version]' \
'-u[Display the user'\''s Node version]' \
'--user[Display the user'\''s Node version]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
&& ret=0
;;
(deactivate)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
&& ret=0
;;
(activate)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'-s+[Shell to generate completions for]: :(zsh bash fish powershell elvish)' \
'--shell=[Shell to generate completions for]: :(zsh bash fish powershell elvish)' \
'-o+[Directory to write generated completions to]' \
'--out-dir=[Directory to write generated completions to]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
&& ret=0
;;
(which)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
':binary -- The binary to find, e.g. `node` or `npm`:_files' \
&& ret=0
;;
(use)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
'::anything:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'--verbose[Enables verbose diagnostics]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_notion_commands] )) ||
_notion_commands() {
    local commands; commands=(
        "fetch:Fetches a tool to the local machine" \
"install:Installs a tool in your toolchain" \
"uninstall:Uninstalls a tool from your toolchain" \
"pin:Pins your project's runtime or package manager" \
"current:Displays the currently activated Node version" \
"deactivate:Disables Notion in the current shell" \
"activate:Re-enables Notion in the current shell" \
"completions:Generates Notion completions" \
"which:Locates the actual binary that will be called by Notion" \
"use:" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'notion commands' commands "$@"
}
(( $+functions[_notion__activate_commands] )) ||
_notion__activate_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion activate commands' commands "$@"
}
(( $+functions[_notion__completions_commands] )) ||
_notion__completions_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion completions commands' commands "$@"
}
(( $+functions[_notion__current_commands] )) ||
_notion__current_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion current commands' commands "$@"
}
(( $+functions[_notion__deactivate_commands] )) ||
_notion__deactivate_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion deactivate commands' commands "$@"
}
(( $+functions[_notion__fetch_commands] )) ||
_notion__fetch_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion fetch commands' commands "$@"
}
(( $+functions[_notion__help_commands] )) ||
_notion__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion help commands' commands "$@"
}
(( $+functions[_notion__install_commands] )) ||
_notion__install_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion install commands' commands "$@"
}
(( $+functions[_notion__pin_commands] )) ||
_notion__pin_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion pin commands' commands "$@"
}
(( $+functions[_notion__uninstall_commands] )) ||
_notion__uninstall_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion uninstall commands' commands "$@"
}
(( $+functions[_notion__use_commands] )) ||
_notion__use_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion use commands' commands "$@"
}
(( $+functions[_notion__which_commands] )) ||
_notion__which_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'notion which commands' commands "$@"
}

_notion "$@"