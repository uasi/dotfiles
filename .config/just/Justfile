import '~/.local/lib/just/prelude.just'
import? '_env.just'

# Rarely-used setup tasks.
mod setup

_default:
    @just --list

# Create Justfile with imports.
[group('just')]
[no-cd]
init-justfile *imports:
    [[ ! -f Justfile ]]
    @for src in prelude {{ imports }}; do echo "import '~/.local/lib/just/$src.just'" >> Justfile; done
    @echo >> Justfile
    @echo '_default:' >> Justfile
    @echo '    @just --list' >> Justfile
    @echo 'Created Justfile.'

# Create simple Justfile.
[group('just')]
[no-cd]
init-justfile-simple:
    [[ ! -f Justfile ]]
    @echo '_default:' >> Justfile
    @echo '    @just --list' >> Justfile
    @echo 'Created Justfile.'

# Add Justfile and *.just to .git/info/exclude.
[group('just')]
[no-cd]
ignore-justfile:
    git rev-parse --is-inside-work-tree >/dev/null
    echo $'Justfile\n*.just' >> "$(git rev-parse --git-dir)/info/exclude"

# Choose and create a LICENSE.
[group('license')]
[no-cd]
init-license:
    ( cd ~/.local/data/licenses && find . -type f -exec basename '{}' .txt ';' ) | sort | fzf --no-multi --bind='enter:become:cp ~/.local/data/licenses/{}.txt LICENSE'
    perl -pi -E 'BEGIN { chomp($y = `date +%Y`) }; s/\[year\]/$y/' LICENSE
    perl -pi -E 'BEGIN { chomp($n = `git config user.name`) }; s/\[fullname\]/$n/' LICENSE

# Run safe/unobtrusive cleanup tasks.
[group('housekeeping')]
cleanup: cargo-sweep-repos git-gc-repos
    exec- pnpm store prune
    exec- brew autoremove
    exec- brew cleanup

# Clear irrelevant Cargo artifacts in ~/repos.
[group('housekeeping')]
cargo-sweep-repos:
    exec- cargo-sweep sweep -i -r ~/repos

# Run `git fetch` for each repo in ~/repos.
[group('housekeeping')]
git-fetch-repos:
    git for-each-my-repo git fetch --all --prune --tags

# Run `git gc` for each repo in ~/repos.
[group('housekeeping')]
git-gc-repos:
    git for-each-my-repo git gc

# Clear ~/var/log.
[group('housekeeping')]
clear-var-log:
    rm -f ~/var/log/*

# Clear global package caches of package managers for the npm ecosystem.
[group('housekeeping')]
clear-js-caches:
    @# Disable for now as Bun requires package.json to run `bun pm cache rm`.
    @# exec- bun pm cache rm
    -exec- npm cache clean --force
    -exec- pnpm store prune
    -exec- yarn cache clean
    -[[ -d ~/.local/share/yarn/berry ]] && yarn-self-dlx 4.4.0 cache clean

# Run all but Mac-related upgrade tasks at once.
[group('housekeeping')]
upgrade-full:
    -paraexec \
        :: mise/ CLICOLOR_FORCE=1 exec- mise upgrade \
        :: rustup/ RUSTUP_TERM_COLOR=always exec- rustup update \
        :: brew/ HOMEBREW_COLOR=1 exec- brew upgrade
    @-just upgrade-vim

# Upgrade Vim plugins.
[group('housekeeping')]
upgrade-vim:
    -vim -c PlugUpgrade -c PlugUpdate -c 'call denops#cache#update(#{reload: v:true})' -c qa

# Upgrade macOS.
[group('housekeeping')]
[macos]
[confirm('May require GUI interaction, and after that, Mac will restart. Are you sure?')]
upgrade-mac-os:
    sudo softwareupdate --install --os-only --restart --agree-to-license

# Upgrade Mac App Store apps.
[group('housekeeping')]
[macos]
[confirm('May require GUI interaction. Are you sure?')]
upgrade-mac-apps:
    exec- mas upgrade
