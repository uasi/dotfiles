#!/usr/bin/env python3

import argparse
import base64
import urllib.parse


class Base64:
    names = ['base64', 'b64', 'b']

    def encode(self, value):
        return base64.b64encode(value.encode('utf-8')).decode()

    def decode(self, value):
        return base64.b64decode(value)


class PercentEncoding:
    names = ['percent-encoding', 'percent', '%']

    def encode(self, value):
        return urllib.parse.quote(value)

    def decode(self, value):
        return urllib.parse.unquote(value)


class XWWWFormEncoded:
    names = ['x-www-form-encoded', 'form', '%+']

    def encode(self, value):
        return urllib.parse.quote_plus(value)

    def decode(self, value):
        return urllib.parse.unquote_plus(value)


CODECS = [Base64, PercentEncoding, XWWWFormEncoded]


def print_hex(itr):
    items = ', '.join(f'0x{i:02x}' for i in itr)
    print(f'[{items}]')


def print_byte_list(value):
    print_hex(value.encode())


def print_ord_list(value):
    print_hex(ord(i) for i in value)


def main():
    parser = argparse.ArgumentParser(description='Encode or decode input.')
    parser.add_argument('value', nargs='?')
    parser.add_argument('-e', '--encode', metavar='ENCODING')
    parser.add_argument('-d', '--decode', metavar='ENCODING')
    parser.add_argument('--byte', action='store_true')
    parser.add_argument('--char', action='store_true')
    parser.add_argument('--ord', action='store_true')
    args = parser.parse_args()

    if args.byte:
        print_byte_list(args.value)
    elif args.char:
        print_char_list(args.value)
    elif args.ord:
        print_ord_list(args.value)
    elif args.encode is not None:
        codec = next(filter(lambda c: args.encode in c.names, CODECS))
        if codec:
            print(codec().encode(args.value))
    elif args.decode is not None:
        codec = next(filter(lambda c: args.decode in c.names, CODECS))
        if codec:
            print(codec().decode(args.value))


if __name__ == '__main__':
    main()
