#!/usr/bin/env python3

import argparse
import errno
import glob
import http.server
import json
import os
import socketserver
import sys
from functools import partial
from http import HTTPStatus
from urllib.parse import urlparse


INDEX_HTML = """\
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>mdserver</title>
    <script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"></script>
    <style>
      header { font-family: sans-serif; font-size: 20px; text-align: center; position: sticky; width: 100%; line-height: 42px; top: 0; left: 0; background-color: #424242; color: white; z-index: 1000; }
      body { margin: 0; }
      zero-md { margin: 1rem; }
      .container { box-sizing: border-box; min-width: 200px; max-width: 980px; margin: 56px auto 0 auto; padding: 45px; }
      @media (max-width: 767px) {
        header { font-size: 15px; }
        .container { padding: 15px; }
      }
    </style>
    <script>
      const { directory, markdownPaths, recursive } = {/*MDSERVER*/};

      document.addEventListener('DOMContentLoaded', () => {
        const container = document.querySelector('.container');
        for (const path of markdownPaths) {
          const hd = document.createElement('header');
          hd.textContent = path;
          container.appendChild(hd);
          const md = document.createElement('zero-md');
          md.setAttribute('src', path);
          container.appendChild(md);
        }

        const header = document.querySelector('header');
        header.textContent = directory + (recursive ? ' (recursive)' : '');
      });
    </script>
  </head>
  <body>
    <header>mdserver</header>
    <div class="container">
    </div>
  </body>
</html>
"""


class Handler(http.server.SimpleHTTPRequestHandler):
    index_html = INDEX_HTML
    recursive = False

    def do_GET(self):
        urlparts = urlparse(self.path)
        if urlparts.path == '/':
            self.send_index()
        else:
            super().do_GET()

    def send_index(self):
        paths = self.list_md()
        mdserver_object = {
            'directory': self.directory,
            'markdownPaths': paths,
            'recursive': self.recursive,
        }
        mdserver_json = json.dumps(mdserver_object)
        html = self.index_html.replace('{/*MDSERVER*/}', mdserver_json)
        html = html.encode()

        self.send_response(HTTPStatus.OK)
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', len(html))
        self.end_headers()

        self.wfile.write(html)

    def list_md(self):
        star = '**/*' if self.recursive else '*'
        pattern = os.path.join(glob.escape(self.directory), star + '.md')
        paths = glob.glob(pattern)
        relpaths = sorted(os.path.relpath(path, self.directory)
                          for path in paths)
        return relpaths


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=8901)
    parser.add_argument('-r', '--recursive', action='store_true')
    parser.add_argument('--index-html', type=open)
    parser.add_argument('directory', type=str, nargs='?', default=os.getcwd())
    args = parser.parse_args()

    if args.index_html:
        Handler.index_html = args.index_html.read()
        args.index_html.close()
    Handler.recursive = args.recursive
    handler_class = partial(Handler, directory=args.directory)

    with socketserver.TCPServer(('', args.port), handler_class) as httpd:
        recursively = ' recursively' if args.recursive else ''
        print('Serving Markdown files in "{}"{}.'
              .format(args.directory, recursively))
        print('Listening on http://localhost:{}'.format(args.port))
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print('\nStopped.')


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        if os.environ.get('TRACE', None) == '1':
            raise
        else:
            print('error: {}'.format(e), file=sys.stderr)
            sys.exit(1)
