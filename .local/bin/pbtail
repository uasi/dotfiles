#!/usr/bin/swift

import Cocoa

func echo(_ string: String, raw: Bool) {
  let terminator = raw || string.hasSuffix("\n") ? "" : "\n"
  print(string, terminator: terminator)
  fflush(stdout)
}

func watchPasteboard(options: Options) {
  let pasteboard = NSPasteboard.general
  var lastChangeCount = pasteboard.changeCount
  var lastString = pasteboard.string(forType: .string) ?? ""

  if options.printInitialValue {
    echo(lastString, raw: options.raw)
  }

  Timer.scheduledTimer(withTimeInterval: 0.05, repeats: true) { _ in
    guard
      pasteboard.changeCount != lastChangeCount,
      let string = pasteboard.string(forType: .string),
      string != lastString
    else {
      return
    }

    echo(string, raw: options.raw)

    lastChangeCount = pasteboard.changeCount
    lastString = string
  }
}

func onSIGINT(handler: @escaping () -> Void) {
  let group = DispatchGroup()

  let queue = DispatchQueue.global(qos: .userInteractive)

  let source = DispatchSource.makeSignalSource(signal: SIGINT, queue: queue)
  source.setEventHandler(handler: handler)

  signal(SIGINT, SIG_IGN)
  source.activate()

  group.enter()
  group.wait()
}

struct Options {
  let printInitialValue: Bool
  let raw: Bool

  init() {
    self.printInitialValue = CommandLine.arguments.contains { argument in
      argument == "-i" || argument == "--print-initial-value"
    }

    self.raw = CommandLine.arguments.contains { argument in
      argument == "-r" || argument == "--raw"
    }
  }
}

func main() {
  let options = Options()

  var shouldKeepRunning = true

  DispatchQueue.global(qos: .background).async {
    onSIGINT {
      shouldKeepRunning = false
    }
  }

  watchPasteboard(options: options)

  while shouldKeepRunning {
    RunLoop.current.run(until: Date(timeIntervalSinceNow: 0.05))
  }
}

main()
