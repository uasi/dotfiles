#!/usr/bin/env ruby

require 'net/http'
require 'shellwords'
require 'bundler'

begin
  require 'gems'
rescue LoadError
  abort 'Error: The gems gem is not installed. Run `gem i gems` and try again.'
end

USAGE = <<END
usage:

gemdiff                        If Gemfile.lock has uncommited changes:
                                  diff HEAD:Gemfile.lock and Gemfile.lock
                              otherwise:
                                  diff HEAD^:Gemfile.lock and Gemfile.lock
gemdiff <branch>               Diff <branch>:Gemfile.lock and Gemfile.lock
gemdiff <oldfile> <newfile>    Diff old and new lock files
END

unless system('git rev-parse --git-dir >/dev/null')
  exit 1
end

if %w(-h --help).include?(ARGV[0])
  puts USAGE
  exit 0
end

if ARGV.size == 0
  if system('git diff --quiet Gemfile.lock')
    old_lock = Bundler::LockfileParser.new(`git show HEAD^:Gemfile.lock`)
    new_lock = Bundler::LockfileParser.new(File.open('Gemfile.lock').read)
  else
    old_lock = Bundler::LockfileParser.new(`git show HEAD:Gemfile.lock`)
    new_lock = Bundler::LockfileParser.new(File.open('Gemfile.lock').read)
  end
elsif ARGV.size == 1
  old_lock = Bundler::LockfileParser.new(`git show #{Shellwords.escape(ARGV[0])}:Gemfile.lock`)
  new_lock = Bundler::LockfileParser.new(File.open('Gemfile.lock').read)
elsif ARGV.size == 2
  old_lock = Bundler::LockfileParser.new(File.open(ARGV[0]).read)
  new_lock = Bundler::LockfileParser.new(File.open(ARGV[1]).read)
else
  $stderr.puts USAGE
  exit 1
end

class GemDiff
  def initialize(gem_name:, old_version:, new_version:)
    @gem_name = gem_name
    @info = Gems.info(gem_name)
    @old_version = old_version
    @new_version = new_version
  end

  def to_s
    return @s if instance_variable_defined?(:@s)
    @s = "- #{@gem_name}: #{@old_version} -> #{@new_version}"
    links = []
    links << "[changelog](#{changelog_uri})" if changelog_uri
    links << "[compare](#{compare_uri})" if compare_uri
    links << "[link](#{repo_uri})" if links.empty? && repo_uri
    unless links.empty?
      @s += " (#{links.join(', ')})"
    end
    @s
  end

  private

  def old_tag
    return @old_tag if instance_variable_defined?(:@old_tag)
    @old_tag = fetch_tag("v#{@old_version}") || fetch_tag(@old_version.to_s) || nil
  end

  def new_tag
    return @new_tag if instance_variable_defined?(:@new_tag)
    @new_tag = fetch_tag("v#{@new_version}") || fetch_tag(@new_version.to_s) || nil
  end

  def repo_uri
    return @repo_uri if instance_variable_defined?(:@repo_uri)
    uri = URI.parse(@info['source_code_uri'] || @info['homepage_uri'] || '')
    @repo_uri = uri.host == 'github.com' ? uri : nil
  end

  def changelog_uri
    return @changelog_uri if instance_variable_defined?(:@changelog_uri)
    @changelog_uri = repo_uri ? fetch_changelog_uri : nil
  end

  def compare_uri
    return @compare_uri if instance_variable_defined?(:@compare_uri)
    if repo_uri && old_tag && new_tag
      @compare_uri = URI("#{repo_uri}/compare/#{old_tag}...#{new_tag}")
    else
      @compare_uri = nil
    end
  end

  def fetch_tag(tag_name)
    return nil unless repo_uri
    resp = https_start('github.com') do |http|
      http.head("#{repo_uri.path}/tree/#{tag_name}")
    end
    resp.code == '200' ? tag_name : nil
  end

  def fetch_changelog_uri
    return nil unless repo_uri
    rev = new_tag || 'master'
    resp = https_start('api.github.com') do |http|
      http.get("/repos#{repo_uri.path}/git/trees/#{rev}")
    end
    if resp.code == '200'
      begin
        tree_hash = JSON.parse(resp.body)
      rescue
        return nil
      end
      path = find_changelog_path(tree_hash)
      path ? URI("#{repo_uri}/blob/#{rev}/#{path}") : nil
    else
      nil
    end
  end

  def find_changelog_path(tree_hash)
    paths = tree_hash["tree"].map { |entry| entry["path"] }
    paths.find { |path| path.match?(/\Achange(?:log|s)\b|\Ahistory\b|\Anews\b/i) }
  end

  def https_start(host, &block)
    net_http = Net::HTTP.new(host, 443)
    net_http.use_ssl = true
    net_http.start(&block)
  end
end

updated_specs = []

old_lock.specs.each do |old_spec|
  new_lock.specs.each do |new_spec|
    if old_spec.name == new_spec.name && old_spec.version != new_spec.version
      updated_specs << [old_spec, old_spec.version, new_spec.version]
    end
  end
end

lines = ["### Updated gems\n"]

updated_specs.each do |spec, old_version, new_version|
  if spec.source.is_a? Bundler::Source::Rubygems
    diff = GemDiff.new(gem_name: spec.name, old_version: old_version, new_version: new_version)
    lines << diff.to_s
  end
end

lines << '' unless updated_specs.empty?
lines << 'Diff generated by https://github.com/uasi/dotfiles/blob/master/.local/bin/gemdiff'

puts lines.join("\n")
